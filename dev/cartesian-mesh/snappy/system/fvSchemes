/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v1706                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

fluxScheme            Kurganov;

ddtSchemes
{
    default           Euler;
    // default           CrankNicolson 0.5;
}

gradSchemes
{
    // default           Gauss linear;
    // default           cellLimited Gauss linear 1;
    default           cellMDLimited leastSquares 1.0;
    //if convergence is difficult, add:
    // grad(U)           cellLimited Gauss linear 0.333;
    // grad(p)           cellLimited Gauss linear 0.333;
    // grad(e)           cellLimited Gauss linear 0.333;
}

divSchemes
{
    default           none;
    div(tauMC)        Gauss linear;
    // div(phi,U)        Gauss limitedLinearV 1;
    div(phi,U)        Gauss linearUpwindV grad(U);
    // div(phi,U)        Gauss MUSCL;
    // div(phi,U)        Gauss vanLeerV;
    // div(phi,e)        Gauss vanLeer;
    // div(phi,T)        Gauss vanLeer;
    // div(phid,p)       Gauss vanLeer;

    // Species diffusion
    div(diffusiveFluxes)   Gauss linear;
    div(phi,Yi_h)     Gauss limitedLinear 1;

    // Turbulence modelling
    //div(phi,k)        Gauss limitedLinear 1;
    //div(phi,omega)    Gauss limitedLinear 1;
    // div(phi,k)        Gauss LUST grad(k);
    // div(phi,omega)    Gauss LUST grad(omega);
    // div(phi,k)        bounded Gauss upwind;
    // div(phi,omega)    bounded Gauss upwind;

    // div(phi,epsilon)  Gauss limitedLinear 1;

    // Needed when there are electrons in the gas mix
    div(U)            Gauss linear;
}

laplacianSchemes
{
    // default           Gauss linear corrected;
    default           Gauss linear limited 1;
    
}

interpolationSchemes
{
    default           linear;
    // reconstruct(rho)  Gamma 1.0;
    // reconstruct(U)    GammaV 1.0;
    // reconstruct(T)    Gamma 1.0;
    reconstruct(rho)  vanAlbada;
    reconstruct(U)    vanAlbadaV;
    reconstruct(T)    vanAlbada;
    // reconstruct(rho)  vanLeer;
    // reconstruct(U)    vanLeerV;
    // reconstruct(T)    vanLeer;
}

snGradSchemes
{
    // default          corrected;
    // default          limited corrected 0.5;
    default          limited corrected 1;
}

wallDist
{
    method          meshWave;
}

laplacianSchemes
{
    //default         Gauss linear corrected;
    laplacian(diffusivity,cellDisplacement) Gauss linear corrected;
}

// ************************************************************************* //
